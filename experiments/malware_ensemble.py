"""
    Test detection rate for specified classifier, using samples
    loaded from specified directory
"""
from simple_parsing import ArgumentParser
from pathlib import Path
import numpy as np
import os
from bbeval.config import ModelConfig
from bbeval.models.utils import get_model_wrapper
from bbeval.datasets.malware.base import MalwareDatumWrapper
from tqdm import tqdm


if __name__ == "__main__":
    parser = ArgumentParser(add_help=False)
    parser.add_argument(
        "--config", help="Specify config file", type=Path)
    args = parser.parse_args()
    model_config = ModelConfig.load(args.config, drop_extra_fields=False)

    load_exp_names = ["dosextend_gbt", "dosextend_malconv", "dosextend_sorel"]
    configurations = [
        ([0, 1], 2),
        ([1, 2], 0),
        ([2, 0], 1),
        ([0, 1, 2], 0)
    ]
    CONFIG_TO_USE = 3
    PICK, EVAL = configurations[CONFIG_TO_USE]

    # Get paths
    all_malwares = []
    for exp_name in PICK:
        loaddir = os.path.join("/p/blackboxsok/malware_samples_all/", load_exp_names[exp_name])
        if not os.path.exists(loaddir):
            raise ValueError(f"Path {loaddir} not found")
        paths = os.listdir(loaddir)
        names = [int(x.split(".exe")[0]) for x in paths]
        sorted_indices = np.argsort(names)
        all_malwares.append([MalwareDatumWrapper(os.path.join(loaddir, paths[i])) for i in sorted_indices])

    # Load up model(s)
    model_configs = [
        {
            "name": "gbt",
            "dataset": "ember",
            "use_pretrained": True
        },
        {
            "name": "malconv",
            "dataset": "ember",
            "use_pretrained": True
        },
        {
            "name": "sorel_0",
            "dataset": "ember",
            "use_pretrained": True
        },
    ]

    def get_preds_all(model_config, files_list):
        target_model = get_model_wrapper(ModelConfig(**model_config))
        target_model.cuda()
        all_scores = []
        for files in files_list:
            iterator = tqdm(files)
            raw_scores = []
            for file in iterator:
                y_label_adv = target_model.predict_proba([file])[0, :]
                raw_scores.append(y_label_adv[1].item())
            all_scores.append(raw_scores)
        return np.array(all_scores), target_model.threshold

    preds_all, thresholds_all = [], []
    for j in PICK:
        others = list(set(PICK) - set([j]))
        preds, threshold = get_preds_all(model_configs[j], [all_malwares[j_] for j_ in others])
        preds_all.append(preds)
        thresholds_all.append(threshold)

    differences = [pred - threshold for pred, threshold in zip(preds_all, thresholds_all)]
    # We want this value to be as high as possible
    differences_all = np.array(differences)
    differences_all = differences_all.transpose(1, 0, 2)
    differences_all = np.mean(differences_all, 0)
    selections = np.argmax(differences_all, 0)

    collected = np.empty(len(all_malwares[0]), dtype=object)
    for i, list in enumerate(all_malwares):
        np_wrapped = np.array(list, dtype=object)
        collected[selections == i] = np_wrapped[selections == i]
    assert None not in collected

    get_gbt_preds, gbt_threshold = get_preds_all(model_configs[EVAL], [collected])
    evasion_rate = np.mean(get_gbt_preds[0] < gbt_threshold)

    # Save to file for VirusTotal
    print("Evastion rate for C1+C2: ", evasion_rate * 100)
    savedir = "/p/blackboxsok/malware_samples_all/ensemble_for_vt"
    for i, c in enumerate(collected):
        with open(os.path.join(savedir, f"{i+1}.exe"), "wb") as f:
            f.write(c.bytes)
