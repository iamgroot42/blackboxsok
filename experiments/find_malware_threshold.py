"""
    Find threshold for given classifier to achieve a specified FPR (default 0.1%)
"""
from simple_parsing import ArgumentParser
from pathlib import Path
import os
import numpy as np
from bbeval.config import MalwareAttackerConfig, ExperimentConfig
from bbeval.datasets.utils import get_dataset_wrapper
from bbeval.datasets.base import CustomDatasetWrapper
from bbeval.datasets.malware.phd import CleanPHDWrapper
from bbeval.models.utils import get_model_wrapper
from sklearn.metrics import roc_curve
import torch as ch
from tqdm import tqdm


if __name__ == "__main__":
    parser = ArgumentParser(add_help=False)
    parser.add_argument(
        "--config", help="Specify config file", type=Path)
    args = parser.parse_args()
    config = ExperimentConfig.load(args.config, drop_extra_fields=False)

    ds_config = config.dataset_config
    batch_size = config.batch_size

    # Get data-loader (malware samples)
    ds: CustomDatasetWrapper = CleanPHDWrapper(clean_or_malware="malware", num_samples=500)
    _, _, test_loader = ds.get_loaders(
        batch_size=batch_size, eval_shuffle=False)

    # Extract configs
    attacker_config_1: MalwareAttackerConfig = config.first_attack_config()

    model_config = attacker_config_1.adv_model_config
    # Get model
    target_model = get_model_wrapper(model_config)
    target_model.cuda()

    num_total = 0
    num_orig = 0
    num_misclassified = 0
    counter = 1
    iterator = tqdm(test_loader, desc="Generating predictions (malware)")
    y_preds_malware = []
    for x_orig in iterator:
        y_preds_malware.append(target_model.predict_proba(x_orig)[:, 1])
    y_preds_malware = ch.cat(y_preds_malware).cpu().numpy()
    
    # Load up clean data
    ds: CustomDatasetWrapper = CleanPHDWrapper(clean_or_malware="clean", num_samples=500)
    _, _, test_loader = ds.get_loaders(
        batch_size=batch_size, eval_shuffle=False)
    
    # Get clean preds
    iterator = tqdm(test_loader, desc="Generating predictions (benign)")
    y_preds_clean = []
    for x_orig in iterator:
        y_preds_clean.append(target_model.predict_proba(x_orig)[:, 1])
    y_preds_clean = ch.cat(y_preds_clean).cpu().numpy()

    y_preds_all = np.concatenate([y_preds_malware, y_preds_clean])
    y_preds_gt = np.concatenate([np.ones_like(y_preds_malware), np.zeros_like(y_preds_clean)])
    fpr, tpr, thresholds = roc_curve(y_preds_gt, y_preds_all, drop_intermediate=False)

    # Get threshold for FPR at most 0.1%
    wanted_fpr = 0.001
    last_fpr = fpr[fpr >= wanted_fpr][0]
    threshold = thresholds[fpr >= wanted_fpr][0]
    print(f"Threshold for FPR {last_fpr} is {threshold}")

    # Compute accuracy at this threshold
    preds = (y_preds_all >= threshold).astype(np.int)
    acc = (preds == y_preds_gt).mean()
    print(f"Accuracy at this threshold is {acc}")
