import os
import magic
from bbeval.datasets.malware.base import MalwareFilesDataset, MalwareDatasetWrapper, MalwareDatumWrapper


class CleanPHDWrapper(MalwareDatasetWrapper):
    def __init__(self, clean_or_malware: str = "malware", num_samples: int = 100):
        self.root = "/p/blackboxsok/datasets/phd-dataset"
        clean_train_folder = os.path.join(self.root, "train01-final/clean/files_all")
        malware_train_folder = os.path.join(self.root, "train01-final/stratified-malware")

        if clean_or_malware == "malware":
            all_files = self._process_files(malware_train_folder, num_samples)
        elif clean_or_malware == "clean":
            all_files = self._process_files(clean_train_folder, num_samples)
        else:
            raise ValueError("Invalid clean_or_malware value")

        # Load data
        self.ds_train = MalwareFilesDataset(all_files)
        self.ds_test = MalwareFilesDataset(all_files)
        self.ds_val = MalwareFilesDataset(all_files)

        # TODO: Integrate with normal parent-class properly
        def collate_fn(batch):
            p, fb, fr = [], [], []
            for b in batch:
                p.append(b.path)
                fb.append(b.bytes)
                fr.append(b.feature)
            batch_wrapper = MalwareDatumWrapper(p, fb, fr)
            return batch_wrapper

        self.collate_fn = collate_fn
    
    def _process_files(self, prefix, num_samples: int):
        all_files = os.listdir(prefix)
        all_files = all_files[:num_samples]
        all_files = list(filter(lambda path: "PE32" in magic.from_file(os.path.join(prefix, path)), all_files))
        all_files = list(map(lambda path: os.path.join(prefix, path), all_files))
        return all_files
