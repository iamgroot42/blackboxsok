import pickle
import json
import subprocess
import os
import numpy as np

from bbeval.datasets.base import CustomDatasetWrapper
from bbeval.config import DatasetConfig


class FenilWrapper(CustomDatasetWrapper):
    def __init__(self, data_config: DatasetConfig):
        """
            self.ds_train and self.ds_test should be set to
            datasets to be used to train and evaluate.
        """
        super().__init__(data_config)
    
    def _train_fraction_func(self, max_length: int = 300):
        api_num_dict = self.read_pickle_file('api_num_dict.pkl')
        benign_list = self.read_pickle_file('benign_list_ngram_analysis')
        malware_list = self.read_pickle_file('malware_list_ngram_analysis')

        temp_api_num_dict = {}
        camel_case_dict = {}
        for i in api_num_dict.keys():
            temp_api_num_dict[i.lower()] = api_num_dict[i]
            camel_case_dict[i.lower()] = i
        api_num_dict = temp_api_num_dict

        max_length = 300
        apis = api_num_dict.keys()

        temp_benign_list = []
        benign_length = len(benign_list)
        for seq in benign_list:
            temp_benign_list.append([i.lower() for i in seq[:max_length]])

        benign_list = temp_benign_list
    
        temp_malware_list = []
        malware_length = len(malware_list)
        for seq in malware_list:
            temp_malware_list.append([i.lower() for i in seq[:max_length]])
    
        malware_list = temp_malware_list

        benign_bigram_dict = {}
        malware_bigram_dict = {}
        follow_api_dict = {}

        for api1 in apis:
            for api2 in apis:
                benign_bigram_dict[api1 + ' ' + api2] = 1
                malware_bigram_dict[api1 + ' ' + api2] = 1

        for seq in benign_list:
            seqlen = len(seq)
            bigram_in_seq = [' '.join(seq[i:i+2]) for i in range(0, seqlen-2)]
            seq_bigram_set = set(bigram_in_seq)
            for bg in seq_bigram_set:
                #already made sure that the key will be present in dict
                benign_bigram_dict[bg] += 1

        divisor = len(benign_list)
        for k in benign_bigram_dict.keys():
            benign_bigram_dict[k] = benign_bigram_dict[k]/divisor

        for seq in malware_list:
            seqlen = len(seq)
            bigram_in_seq = [' '.join(seq[i:i+2]) for i in range(0, seqlen-2)]
            seq_bigram_set = set(bigram_in_seq)
            for bg in seq_bigram_set:
                malware_bigram_dict[bg] += 1

        divisor = len(malware_list)
        for k in malware_bigram_dict.keys():
            malware_bigram_dict[k] = malware_bigram_dict[k]/divisor

        print(len(apis))
        for api in apis:
            bigrams = [api + ' ' + i for i in apis]
            scores = [benign_bigram_dict[i] - malware_bigram_dict[i] for i in bigrams]
            # print(scores)
        #     max_idx = scores.index(max(scores))
            max_7_idx = np.argsort(scores)[-1:]
        #     print(scores[max_7_idx[-1]])
            print(camel_case_dict[api] + ' ' + ' '.join(
                [camel_case_dict[bigrams[i].split(' ')[1]] for i in max_7_idx]))
        
    
    def _extract_and_encode_api(self, seq_max_len: int = 5000):
        """
            Notebook to extract API call sequence from JSON reports and integer-encode it
	        It will take directory containing JSON reports as input
	        It will save list of API call sequences as pickle file as output
	        Only half of them(10k) are integer-encoded which will be used to train 6 target models
	        Rest 10k are used to train Fraction Function
        """


        #### FIRST CELl
        #Extracts API call sequences

        #set these parameters
        # reports_dirpath = "/path/to/directory/containing/reports"
        reports_dirpath = '/other/new_reports/malware/'
        pickle_file_name = "name_of_pickle.pkl"

        api_set = set()

        def get_api_calls(cdir):
            string_list = []
            for input_file_path in subprocess.check_output("find " + cdir +" -type f -iname 'report.json'", shell=True).splitlines():
                    input_file = open(input_file_path,'r')
                    try:
                        #It throws exception if json_decode fails
                        json_decode=json.load(input_file)
                    except ValueError:
                        pass
            
                    #behavior contains api call sequence
                    if "behavior" in json_decode:
                        behavior = json_decode["behavior"]
                
                        #a single malware can invoke multiple processes
                        if "processes" in behavior:
                            process = behavior["processes"]
                            local_count = 0
                            for p in process:
                                if(local_count > 2):
                                    break
                                if "calls" in p:
                                    calls = p["calls"]
                                    if(len(calls) >= 300):
                                        local_count += 1
                                        new_list = [i["api"] for i in calls[:seq_max_len]]
                                        for j in new_list:
                                            api_set.add(j)
        #                                 print(api_set)
                                        string_list.append(new_list)
        #                                 break
        #                                 print(new_list)
            with open(pickle_file_name, "wb") as fp:
                pickle.dump(string_list,fp)
        #     with open("api_set.pkl", "wb") as setfile:
        #         pickle.dump(api_set, setfile)

                                    



        get_api_calls(reports_dirpath)
        #get_freq("reports/benign", one_gram)
        #### SECOND CELL

        api_set = self.read_pickle_file('api_set.pkl')

        api_num_dict = {}
        idt = 1
        for i in api_set:
            api_num_dict[i] = idt
            idt += 1

        # save the numbering
        with open("api_num_dict.pkl", 'wb') as numfile:
            pickle.dump(api_num_dict, numfile)


        # load the api calls extracted from Cuckoo reports
        with open("malware_api_call_sequence.pkl", 'rb') as malwarefile:
            malware_list = pickle.load(malwarefile)
        with open("benign_api_call_sequence.pkl", 'rb') as benignfile:
            benign_list = pickle.load(benignfile)


        malware_half = int(len(malware_list)/2)
        benign_half = int(len(malware_list)/2)

        malware_list_ngram_analysis = malware_list[:malware_half]
        benign_list_ngram_analysis = benign_list[:benign_half]

        with open("malware_list_ngram_analysis.pkl", 'wb') as mln:
            pickle.dump(malware_list_ngram_analysis, mln)

        with open("benign_list_ngram_analysis.pkl", 'wb') as bln:
            pickle.dump(benign_list_ngram_analysis, bln)

        malware_list = malware_list[malware_half:]
        benign_list = benign_list[benign_half:]

        malware_length = len(malware_list)
        benign_length = len(benign_list)

        total_list = malware_list
        total_list.extend(benign_list)

        for i in range(len(total_list)):
            for j in range(len(total_list[i])):
                total_list[i][j] = api_num_dict[total_list[i][j]]

        data_dict = {}
        data_dict['X'] = np.array(total_list)
        y = [1 for i in range(malware_length)]
        y.extend([0 for i in range(benign_length)])
        data_dict['y'] = y

        with open('integer_encoded_labelled_sequences.pkl', 'wb') as mdh:
            pickle.dump(data_dict, mdh)


    def read_pickle_file(self, file_path):
        with open(os.path.join(self.root, file_path), 'rb') as f:
            return pickle.load(f)
