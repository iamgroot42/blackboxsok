import os
import numpy as np
import torch as ch
from ember.features import PEFeatureExtractor
from torch.utils.data import DataLoader

from bbeval.config import DatasetConfig, TrainConfig
from bbeval.datasets.base import CustomDatasetWrapper


class MalwareDatasetWrapper(CustomDatasetWrapper):
    def __init__(self, data_config: DatasetConfig, num_classes: int):
        """
            self.ds_train and self.ds_test should be set to
            datasets to be used to train and evaluate.
        """
        super().__init__(data_config, num_classes)
        self.processed = False
        self.feature_version = 2

    def _process_with_lief(self, X, want_json: bool = False):
        extractor = PEFeatureExtractor(self.feature_version)
        if want_json:
            return extractor.raw_features(X)
        else:
            return extractor.feature_vector(X)


class MalwareDatumWrapper:
    def __init__(self, path):
        self.filepath = path
        self.file_bytes = None
        self.feature_rep = None
    
    @property
    def path(self):
        return self.filepath
    
    @property
    def bytes(self):
        # Caching
        if self.file_bytes is None:
            with open(self.filepath, 'rb') as f:
                self.file_bytes = f.read()
        return self.file_bytes
    
    @property
    def feature(self):
        return self.feature_rep