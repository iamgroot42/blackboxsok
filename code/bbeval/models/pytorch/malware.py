"""
    Implementation borrowed from https://github.com/pralab/secml_malware
"""
import torch.nn as nn
import torch as ch
import os
from typing import List

from bbeval.config import MalwareModelConfig
from bbeval.models.pytorch.wrapper import PyTorchModelWrapper
from bbeval.datasets.malware.base import MalwareDatumWrapper

# from secml.array import CArray
# from secml_malware.models.malconv import MalConv
# from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware, End2EndModel
# from secml_malware.models.c_classifier_ember import CClassifierEmber
# from secml_malware.models.c_classifier_sorel_net import CClassifierSorel
# from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi, CEmberWrapperPhi, CSorelWrapperPhi


class MLPClassifier(PyTorchModelWrapper):
    def __init__(self, model_config: MalwareModelConfig):
        super().__init__(model_config)
        n_inp = 2381
        self.model = nn.Sequential(
            nn.Linear(n_inp, 2400),
            nn.ReLU(),
            nn.Linear(2400, 1200),
            nn.ReLU(),
            nn.Linear(1200, 1200),
            nn.ReLU(),
            nn.Linear(1200, 2)
        )


class SecmlMalConv(PyTorchModelWrapper):
    def __init__(self, model_config: MalwareModelConfig):
        super().__init__(model_config)
        self.model = MalConv()
        self.model = CClassifierEnd2EndMalware(self.model)
        self.model.load_pretrained_model()
    
    def pre_process(self, X: List[MalwareDatumWrapper]):
        return CArray([End2EndModel.bytes_to_numpy(
            x.bytes, self.model.get_input_max_length(), 256, False
        ) for x in X])
    
    def _forward(self, x):
        retobj = self.model.predict(x, True)
        preds = ch.from_numpy(retobj[1].tondarray()).cuda()
        return preds
    
    def cuda(self):
        # No concept of CUDA for this model
        return
    
    def get_phi_wrapper_class(self):
        return CEnd2EndWrapperPhi


class SecmlGBT(PyTorchModelWrapper):
    def __init__(self, model_config: MalwareModelConfig):
        super().__init__(model_config)
        self.model = CClassifierEmber(tree_path="/p/blackboxsok/datasets/ember_2018_2/ember_model_2018.txt")

    def pre_process(self, X: List[MalwareDatumWrapper]):
         return self.model.extract_features([x.bytes for x in X], direct=True)

    def _forward(self, x):
        retobj = self.model.predict(x, True)
        preds = ch.from_numpy(retobj[1].tondarray()).cuda()
        return preds
    
    def cuda(self):
        # No concept of CUDA for this model
        return
    
    def get_phi_wrapper_class(self):
        return CEmberWrapperPhi


class SecmlSOREL(PyTorchModelWrapper):
    def __init__(self, model_config: MalwareModelConfig):
        super().__init__(model_config)
        self.seeds = [0, 1, 2, 3, 4]
        last_epoch = "epoch_10.pt"
        # model_path = "/p/blackboxsok/models/sorel/FFNN"
        model_path = "/p/blackboxsok/models/sorel/FFNN/seed0/"
        self.model = CClassifierSorel(model_path = os.path.join(model_path, last_epoch), binary_preds=True)

    def pre_process(self, X: List[MalwareDatumWrapper]):
        return CArray([self.model.extract_features(x.bytes, direct=True, wrap=False) for x in X])

    def _forward(self, x):
        retobj = self.model.predict(x, True)
        preds = ch.from_numpy(retobj[1].tondarray()).cuda()
        return preds
    
    def cuda(self):
        self.model._sorel.cuda()

    def get_phi_wrapper_class(self):
        return CSorelWrapperPhi
